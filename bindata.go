// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package gdn generated by go-bindata.// sources:
// assets/sakura/LICENSE.txt
// assets/sakura/source.txt
package gdn

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsSakuraLicenseTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x51\xcd\x6e\xe3\x36\x10\xbe\xf3\x29\x3e\xe4\xb4\x0b\x08\xe9\xcf\xa1\x87\xde\x18\x89\xb6\x88\x4a\xa4\x41\xd1\xeb\xfa\x48\x4b\x74\xc4\x42\x16\x0d\x91\x6e\x90\xb7\x2f\x46\x76\x76\x9b\x3d\x09\xe2\xcc\xf7\x3b\xad\xb4\x68\x42\xef\xe7\xe4\x19\x2b\xe3\xf5\x7d\x09\xaf\x63\xc6\x97\xfe\x2b\x7e\xff\xf5\xb7\x3f\xd0\x86\xec\xd3\x88\x6e\x74\x23\x63\x3b\xbf\x5c\x42\x4a\x21\xce\x08\x09\xa3\x5f\xfc\xe9\x1d\xaf\x8b\x9b\xb3\x1f\x0a\x9c\x17\xef\x11\xcf\xe8\x47\xb7\xbc\xfa\x02\x39\xc2\xcd\xef\xb8\xfa\x25\xc5\x19\xf1\x94\x5d\x98\xc3\xfc\x0a\x87\x3e\x5e\xdf\x59\x3c\x23\x8f\x21\x21\xc5\x73\x7e\x73\x8b\x87\x9b\x07\xb8\x94\x62\x1f\x5c\xf6\x03\x86\xd8\xdf\x2e\x7e\xce\x2e\x93\xde\x39\x4c\x3e\xe1\x4b\x1e\x3d\x9e\xba\x07\xe2\xe9\xeb\x2a\x32\x78\x37\xb1\x30\x83\x66\x1f\x23\xbc\x85\x3c\xc6\x5b\xc6\xe2\x53\x5e\x42\x4f\x1c\x05\xc2\xdc\x4f\xb7\x81\x3c\x7c\x8c\xa7\x70\x09\x0f\x05\x82\xaf\xe1\x13\xcb\x11\xb7\xe4\x8b\xd5\x67\x81\x4b\x1c\xc2\x99\xbe\x7e\x8d\x75\xbd\x9d\xa6\x90\xc6\x02\x43\x20\xea\xd3\x2d\xfb\x02\x89\x1e\xd7\x16\x0b\xca\xf1\x4b\x5c\x90\xfc\x34\xb1\x3e\x5e\x83\x4f\x58\xb3\xfe\x70\xb7\xee\x90\xf5\x2b\x15\x9a\x1f\x15\x25\x7a\x79\x1b\xe3\xe5\x73\x92\x90\xd8\xf9\xb6\xcc\x21\x8d\x7e\xc5\x0c\x11\x29\xae\x8a\xff\xf8\x3e\xd3\x0b\xad\x9f\xe3\x34\xc5\x37\x8a\xd6\xc7\x79\x08\x94\x28\xfd\xc9\x98\x1d\x3d\xdc\x29\xfe\xeb\xd7\x2c\xf7\xdb\xce\x31\x87\xfe\x5e\xf7\x7a\x80\xeb\x8f\xab\x3e\x46\x69\x74\xd3\x84\x93\x7f\x14\xe6\x07\x84\x19\xee\x7f\x71\x16\x92\x4f\xd9\xcd\x39\xb8\x09\xd7\xb8\xac\x7a\x3f\xc7\x7c\x66\xcc\xd6\x02\x9d\xde\xd8\x03\x37\x02\xb2\xc3\xce\xe8\x6f\xb2\x12\x15\x9e\x78\x07\xd9\x3d\x15\x38\x48\x5b\xeb\xbd\xc5\x81\x1b\xc3\x95\x3d\x42\x6f\xc0\xd5\x11\x7f\x49\x55\x15\x10\x7f\xef\x8c\xe8\x3a\x68\xc3\x64\xbb\x6b\xa4\xa8\x0a\x48\x55\x36\xfb\x4a\xaa\x2d\x5e\xf6\x16\x4a\x5b\x34\xb2\x95\x56\x54\xb0\x1a\x24\xf8\xa0\x92\xa2\x23\xb2\x56\x98\xb2\xe6\xca\xf2\x17\xd9\x48\x7b\x2c\xd8\x46\x5a\x45\x9c\x1b\x6d\xc0\xb1\xe3\xc6\xca\x72\xdf\x70\x83\xdd\xde\xec\x74\x27\xc0\x55\x05\xa5\x95\x54\x1b\x23\xd5\x56\xb4\x42\xd9\x67\x48\x05\xa5\x21\xbe\x09\x65\xd1\xd5\xbc\x69\x48\x8a\xf1\xbd\xad\xb5\x21\x7f\x28\xf5\xee\x68\xe4\xb6\xb6\xa8\x75\x53\x09\xd3\xe1\x45\xa0\x91\xfc\xa5\x11\x77\x29\x75\x44\xd9\x70\xd9\x16\xa8\x78\xcb\xb7\x62\x45\x69\x5b\x0b\xc3\x68\xed\xee\x0e\x87\x5a\xd0\x13\xe9\x71\x05\x5e\x5a\xa9\x15\xc5\x28\xb5\xb2\x86\x97\xb6\x80\xd5\xc6\x7e\x87\x1e\x64\x27\x0a\x70\x23\x3b\x2a\x64\x63\x74\x5b\x30\xaa\x53\x6f\x68\x45\x2a\xc2\x29\x71\x67\xa1\xaa\xf1\xe9\x22\xda\xac\xff\xfb\x4e\x7c\x27\x44\x25\x78\x23\xd5\xb6\x23\x30\x45\xfc\x58\x7e\x66\xff\x05\x00\x00\xff\xff\xdc\xf8\x00\xa1\x2c\x04\x00\x00")

func assetsSakuraLicenseTxtBytes() ([]byte, error) {
	return bindataRead(
		_assetsSakuraLicenseTxt,
		"assets/sakura/LICENSE.txt",
	)
}

func assetsSakuraLicenseTxt() (*asset, error) {
	bytes, err := assetsSakuraLicenseTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/sakura/LICENSE.txt", size: 1068, mode: os.FileMode(420), modTime: time.Unix(1590563709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSakuraSourceTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x28\x29\x29\x28\xb6\xd2\xd7\x4f\xcf\x2c\xc9\x28\x4d\xd2\x4b\xce\xcf\xd5\xcf\xaf\x48\xcc\xc9\x2f\x4a\xd7\x2f\x4e\xcc\x2e\x2d\x4a\xd4\x4f\x2c\x4a\xce\xc8\x2c\x4b\xd5\x37\xd4\x33\xd6\x33\xd0\x2b\x49\x2c\xd2\x4b\xaf\xe2\x02\x04\x00\x00\xff\xff\x7a\x4e\x36\x48\x37\x00\x00\x00")

func assetsSakuraSourceTxtBytes() ([]byte, error) {
	return bindataRead(
		_assetsSakuraSourceTxt,
		"assets/sakura/source.txt",
	)
}

func assetsSakuraSourceTxt() (*asset, error) {
	bytes, err := assetsSakuraSourceTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/sakura/source.txt", size: 55, mode: os.FileMode(384), modTime: time.Unix(1605383645, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/sakura/LICENSE.txt": assetsSakuraLicenseTxt,
	"assets/sakura/source.txt":  assetsSakuraSourceTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"sakura": &bintree{nil, map[string]*bintree{
			"LICENSE.txt": &bintree{assetsSakuraLicenseTxt, map[string]*bintree{}},
			"source.txt":  &bintree{assetsSakuraSourceTxt, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
